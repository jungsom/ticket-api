# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  id: Int

  """생성일"""
  createdAt: DateTime

  """수정일"""
  updatedAt: DateTime

  """삭제일"""
  deletedAt: DateTime
  email: String!
  name: String!
  password: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Ticket {
  id: Int

  """생성일"""
  createdAt: DateTime

  """수정일"""
  updatedAt: DateTime

  """삭제일"""
  deletedAt: DateTime

  """티켓 코드"""
  code: String!

  """티켓 이름"""
  name: String!

  """티켓 예약 상태"""
  state: TicketState!
}

"""예약 상태"""
enum TicketState {
  AVAILABLE
  RESERVED
}

type ErrorOutput {
  code: String
  message: String
}

type TicketOutPut {
  error: ErrorOutput
  id: Int
  code: String
  name: String
  state: TicketState
}

type TicketCountOutPut {
  error: ErrorOutput
  name: String
  count: Int
}

type UserTicketOutput {
  error: ErrorOutput
  id: Int
  user: User
  ticket: Ticket
}

type UserOutPut {
  error: ErrorOutput
  id: Int
  email: String
  name: String
}

type Query {
  signup(input: UserInput!): UserOutPut!
  login(input: UserInput!): UserOutPut!
  getTicketById(input: TicketInput!): TicketOutPut!
  getAvailableTickets(input: TicketInput!): [TicketOutPut!]!
  getTicketCounts: [TicketCountOutPut!]!
  getReservedTicketByUser: [UserTicketOutput!]!
}

input UserInput {
  email: String
  password: String
  name: String
}

input TicketInput {
  id: Int
  name: String
}

type Mutation {
  updateTicket(input: TicketInput!): String!
  cancelReservedTicketByUser(input: TicketInput!): TicketOutPut!
}